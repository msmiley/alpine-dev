---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Chart.Name }}"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Chart.Name }}"
  serviceName: "{{ .Chart.Name }}"
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Chart.Name }}"
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets: {{ toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      {{- if .hosts }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/hostname
                  operator: In
                  values:
                  {{- range .hosts }}
                    - {{ . | quote }}
                  {{- end }}
      {{- end }}
      {{- end }}
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          args:
          {{- range $key, $value := .Values.extraArgs }}
            {{- /* Accept keys without values or with false as value */}}
            {{- if eq ($value | quote | len) 2 }}
            - --{{ $key }}
            {{- else }}
            - --{{ $key }}={{ $value }}
            {{- end }}
          {{- end }}
          env:
          {{- if .Values.envVars }}
          {{- toYaml .Values.envVars | nindent 10 }}
          {{- end }}
          ports:
            - containerPort: 2222
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
          volumeMounts:
            - name: "{{ .Chart.Name }}-home"
              mountPath: /root
  volumeClaimTemplates:
  - metadata:
      name: "{{ .Chart.Name }}-home"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.persistence.storageClass }}
      resources:
        requests:
          storage: {{ .Values.persistence.size }}

